[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"bs4 output mytemplate R Markdown, using bookdown R package.\npurpose gitbook extend capability organizing codes learnt FLAC3D manual.\nPDF file, click cover image.\nWord file, click .\nGitbook file, email kyeongsunkim@snu.ac.kr.Kyeong Sun Kim\nSeptember 2021\nSeoul National University","code":""},{"path":"kaist-model.html","id":"kaist-model","chapter":"1 KAIST Model","heading":"1 KAIST Model","text":"","code":""},{"path":"kaist-model.html","id":"initial-configuration","chapter":"1 KAIST Model","heading":"1.1 Initial Configuration","text":"","code":"import itasca as it\nimport numpy as np\nnp.set_printoptions(threshold=20)\nit.command(\"python-reset-state false\")\nfrom itasca import zonearray as za\nfrom itasca import gridpointarray as gpa\n\n# PARAMETERS #\n\n_D_shaft = 1\n_H_shaft = 7.45\n_T_plate = 1.5\n_B_footing = 3.25\n_D_footing = _H_shaft + _T_plate\n_B_soil = _B_footing*5\n_D_soil = _D_footing+3\n\n_radial = 50\n_perimeter = 2*_radial\n_axial = 2*_radial\n_outer = 2*_radial\n\n_bulk = 13.9e9\n_shear = 10.4e9\n\n_E_o = 1e7\n_const = 1e8\n_poisson = 0.25"},{"path":"kaist-model.html","id":"zones","chapter":"1 KAIST Model","heading":"1.2 Zones","text":"","code":"# ZONE #\ncommand_zone = \"\"\"\nmodel new\nz crea r-t p 0 (0,0,0) ...\n           p 1 ({B_soil},0,0) ... \n           p 2 (0,{D_soil},0) ...\n           p 3 (0,0,{B_soil}) ...\n           p 4 ({B_soil},{D_soil},0) ...\n           p 5 (0,{D_soil},{B_soil}) ...\n           p 6 ({B_soil},0,{B_soil}) ...\n           p 7 ({B_soil},{D_soil},{B_soil}) ...\n           p 8 ({B_footing},0,0) ...\n           p 9 (0,0,{B_footing}) ...\n           p 10 ({B_footing},{D_soil},0) ...\n           p 11 (0,{D_soil},{B_footing}) ...\n           p 12 ({B_footing},0,{B_footing}) ...\n           p 13 ({B_footing},{D_soil},{B_footing}) ...\n           size {radial} {axial} {perimeter} {outer} ...\n           rat 1 1 1 1.01 ...\n           fill\n\"\"\"\n\ncommand = command_zone.format(\nB_footing = _B_footing,\nB_soil = _B_soil,\nD_soil = _D_soil,\nradial=_radial,\naxial = _axial,\nperimeter = _perimeter,\nouter = _outer)\n\nit.command(command)"},{"path":"kaist-model.html","id":"group","chapter":"1 KAIST Model","heading":"1.3 Group","text":"","code":"# GROUP #\np = za.pos()\nx,y,z = p.T\nprint(it.zone.count(), \"zones in whole model\")\n\nshaft = reduce(np.logical_and, (np.sqrt(x**2+z**2)<_D_shaft, y<_H_shaft))\nza.set_group(shaft, \"shaft\") # set the zones with shaft = true have \"shaft\" and \"geometry\"\nprint(za.in_group(\"shaft\").sum(), \"zones in shaft group.\") #output how many zones are in the corner group\n\nplate = reduce(np.logical_and, (x<_B_footing,z<_B_footing, y>_H_shaft,y<_D_footing))\nza.set_group(plate, \"plate\") # set the zones with plate = true have \"plate\" and \"geometry\"\nprint(za.in_group(\"plate\").sum(), \"zones in plate group.\") #output how many zones are in the corner group"},{"path":"kaist-model.html","id":"constitutive-model","chapter":"1 KAIST Model","heading":"1.4 Constitutive Model","text":"Besides standard looping depicted , one can easily loop sets model objects (.e., zones, gridpoints, structural element nodes, etc.) using loop foreach construct. case, container objects must given FISH intrinsic zone.list. practical use loop foreach construct install nonlinear initial distribution elastic moduli FLAC3D grid. Suppose Young’s modulus site given equation:\\[ E = E_0 + c \\sqrt{z}  \\]\nz depth surface, c E∘ constants. write FISH function install appropriate values bulk shear modulus grid, example:, can verify correct operation function printing plotting shear bulk moduli.function install, loop takes place zones global list zones. FISH statement loop foreach variation loop statement sets pnt zone zone.list. Inside loop, z-coordinate zone centroid used calculate Young’s modulus, given equation . assume datum (ground surface reference point) z = 0. variables zone.pos.z(pnt) zone.prop(pnt, ‘young’) zone intrinsics. (Recall talked gridpoint intrinsic gp.force.unbal earlier.) , set properties directly within FISH function, rather zone property command earlier example.","code":"# CONSTITUTIVE MODEL\nit.command(\"\"\"\nzone cmodel assign elastic range group \"Radial Tunnel1\"\nzone cmodel assign elastic range group 'shaft'\nzone cmodel assign elastic range group 'plate'\n\nfish define fname(E_o,const)\nloop foreach pnt zone.list\nz_depth = zone.pos.y(pnt)\nE = E_o+const*math.sqrt(z_depth)\nzone.prop(pnt,'young')=E\nend_loop\nend\n@fname({E_o_},{const_})\nzone property poisson {poisson_}\nplot item create zone contour property name 'young'\n\"\"\".format(E_o_=_E_o,const_=_const,poisson_=_poisson))\n\nit.command(\"\"\"\nzone property bulk {bulk}  shear {shear} range group 'shaft'\nzone property bulk {bulk}  shear {shear} range group 'plate'\n\"\"\".format(bulk=_bulk,shear=_shear))# SOFTENING MODEL #\n#it.command(\"\"\"\n#zone cmodel assign strain-softening range group \"Radial Tunnel1\"\n#zone property density 2500 bulk 2e8 shear 1e8 range group \"Radial Tunnel1\"\n#zone property cohesion 2e6 friction 45 tension 2e5 dilation 10 range group \"Radial Tunnel1\"\n#zone property table-friction 'fri' table-cohesion 'coh' table-dilation 'dil' range group \"Radial Tunnel1\"\n#table 'fri' add (0, 45) (.05, 42) (.1, 40) (1, 40)\n#table 'coh' add (0,2e6) (.05,1e6) (.1,5e5) (1,5e5) \n#table 'dil' add (0, 10) (.05,  3) (.1,  0)\n#\"\"\")"},{"path":"kaist-model.html","id":"soil-structure-interface","chapter":"1 KAIST Model","heading":"1.5 Soil-Structure Interface","text":"","code":"# INTERFACE"},{"path":"kaist-model.html","id":"boundary-conditions","chapter":"1 KAIST Model","heading":"1.6 Boundary Conditions","text":"","code":""},{"path":"kaist-model.html","id":"initial-equilibrium","chapter":"1 KAIST Model","heading":"1.7 Initial Equilibrium","text":"","code":""},{"path":"kaist-model.html","id":"alterations","chapter":"1 KAIST Model","heading":"1.8 Alterations","text":"","code":""},{"path":"kaist-model.html","id":"results","chapter":"1 KAIST Model","heading":"1.9 Results","text":"","code":""},{"path":"axial-concrete-pile.html","id":"axial-concrete-pile","chapter":"2 Axial Concrete Pile","heading":"2 Axial Concrete Pile","text":"","code":""},{"path":"axial-concrete-pile.html","id":"problem-description","chapter":"2 Axial Concrete Pile","heading":"2.1 Problem Description","text":"","code":""},{"path":"axial-concrete-pile.html","id":"problem-statement","chapter":"2 Axial Concrete Pile","heading":"2.1.1 Problem Statement","text":"pile subjected axial load 100 kN,\ntop pile moved horizontally displacement 4 cm.\ngoal determine relation axial loading ultimate bearing capacity.\n, lateral load-deflection curve calculated.origin top pile, z upward.z=0: free surfacez=-8: fixed z-eirectionx=+8, -8, y = 8: rollerskin friction modeled placing interface\npile concrete wall clay.\n, fric angle 20 c=30kPa assumed.toe interface placed pile tip clay\nnote: Zone faces separated previous command gridpoints common separated well.note: include Figure grid (geometry)","code":""},{"path":"axial-concrete-pile.html","id":"main-parameters","chapter":"2 Axial Concrete Pile","heading":"2.1.2 Main Parameters","text":"Diameter = 0.6 m\nLength = 5\nClay\nGWT = 5.5m","code":""},{"path":"axial-concrete-pile.html","id":"modeling-procedure","chapter":"2 Axial Concrete Pile","heading":"2.2 Modeling Procedure","text":"equil. stress state gravity load install.\n1-1) water table created z=5.5\n1-2) wet density clay assigned water table.equil. stress state installation.\n2-1) change properties pile zones \nrepresenting clay representing concrete.\n2-2) vertical equil. stress distribution equil. state shown innote: include Figure contours vertical stress ini state incld. pile weightapply vertical velocity top pile\n“ramp” = boundary condition increased linearlynote: critical timestep controlled high stiffness concrete\nvelocity sudden, inertial effects dominate renders difficulty identification steady state response system\ntable “ramp” used apply velocity pile top gridpoints.note: FISH FUNCTION vert_load calculates axial stress top pile stores value history\nefficiency, gridpoints cap surface stored symbol “cap” mapnote: include plot axial stress vs axial displ. pile toe. ramp = (0,5e-8), step number = 30000note: combined damping used remove kinetic energy prescribed loading condition. mass-adjustment process depends velocity sign-changes..note: FISH FUNCTION tot_reac monitors soil reaction along pile func lateral displ. tot_reac creates tables soil reaction (p) vs. lateral displ (y) diff. locations along pile generate p-y curve.note: include Figure p-y curve 11 equidistant points along pile","code":""},{"path":"axial-concrete-pile.html","id":"zones-1","chapter":"2 Axial Concrete Pile","heading":"2.3 Zones","text":"","code":"model new\nmodel title 'Axial and lateral loading of a concrete pile'\n; create grid interactively from the extruder tool, \n; exported to geometry.f3dat from State Record pane.\ncall 'geometry' suppress\nzone generate from-extruder\n; Reflect the grid to get a 1/2 space instead of a 1/4 space\nzone reflect dip-direction 270 dip 90"},{"path":"axial-concrete-pile.html","id":"groups","chapter":"2 Axial Concrete Pile","heading":"2.4 Groups","text":"","code":"; Name intersections of things named in the two extruder views\nzone group 'clay' range group 'clay-c' or 'clay-s' or 'wetclay-s'\nzone group 'pile' range group 'pile-c' group 'pile-s' or 'remove-s'\nzone group 'remove' range group 'remove-s' group 'pile-c' not ; \nzone face group 'wall' internal range group 'wall-c' group 'pile'\nzone face group 'base' internal range group 'base-s' group 'pile'\nzone face skin ; Name far field boundaries\n; Delete the area marked for removal\nzone delete range group 'remove'\n;\n; setup interfaces\n; separate using zone separate\n; all at once so common nodes are separated\nzone separate by-face new-side group 'iwall' slot 'int' ...\n     range group 'wall' or 'base'\n; Want two different interfaces for proper normal direction at corner\nzone interface 'side' create by-face range group 'wall' and 'iwall'\nzone interface 'base' create by-face range group 'base' and 'iwall'\n; Save initial geometric state\nmodel save 'geometry'"},{"path":"axial-concrete-pile.html","id":"properties","chapter":"2 Axial Concrete Pile","heading":"2.5 Properties","text":"","code":"; Initialize gravity, pore-pressures, density, and stres state\nmodel gravity 10\n; water table information\nzone water density 1000\nzone water plane origin (0,0,-5.5) normal (0,0,-1)\nzone initialize density 1230\nzone initialize density 1550 range group 'wetclay-s' ; Wet density\n; assign properties to the soil and interfaces - temporarily remove pile cap\nzone cmodel assign mohr-coulomb ...\n     range group 'clay'\nzone property bulk 8.333e7  shear 3.846e7  cohesion 30000 fric 0 ...\n     range group 'clay'\nzone cmodel assign elastic                 range group 'pile'\nzone property bulk 8.333e7  shear 3.846e7  range group 'pile'\nzone cmodel assign null                    range group 'remove-s'\nzone interface 'side' node property stiffness-normal 1e8 ...\n                           stiffness-shear 1e8 friction 20 cohesion 30000\nzone interface 'base' node property stiffness-normal 1e8 ...\n                           stiffness-shear 1e8 friction 20 cohesion 30000"},{"path":"axial-concrete-pile.html","id":"b.c.-and-i.c.","chapter":"2 Axial Concrete Pile","heading":"2.6 B.C. and I.C.","text":"","code":"; boundary and initial stress conditions\nzone face apply velocity-normal 0 range group 'Bottom'\nzone face apply velocity-normal 0 range group 'East' or 'West'\nzone face apply velocity-normal 0 range group 'North' or 'South'\nzone initialize-stress ratio 0.4286\nzone interface 'side' node initialize-stresses\nzone interface 'base' node initialize-stresses"},{"path":"axial-concrete-pile.html","id":"initial-equilibrium-1","chapter":"2 Axial Concrete Pile","heading":"2.7 Initial Equilibrium","text":"","code":"; Solve to initial equilibrium\nzone ratio local\nmodel solve ratio 1e-4\nmodel save 'initial'"},{"path":"axial-concrete-pile.html","id":"alterations-1","chapter":"2 Axial Concrete Pile","heading":"2.8 Alterations","text":"","code":""},{"path":"axial-concrete-pile.html","id":"install-the-pile","chapter":"2 Axial Concrete Pile","heading":"2.8.1 install the pile","text":"","code":"; install the pile\nmodel restore 'initial'\nzone cmodel assign elastic                          range group 'pile'\nzone property bulk 13.9e9 shear 10.4e9 density 2500 range group 'pile'\nmodel solve ratio 1e-4\nmodel save 'install'"},{"path":"axial-concrete-pile.html","id":"vertical-loading","chapter":"2 Axial Concrete Pile","heading":"2.8.2 vertical loading","text":"","code":"; vertical loading\nzone initialize state 0\nzone gridpoint initialize displacement (0,0,0)\nzone gridpoint initialize velocity     (0,0,0) \ntable 'ramp' add ([global.step],0) ([global.step+30000],-5e-8) ...\n      ([global.step+58000],-5e-8) ; Increase velocity applied to pile\n                                  ; over 30,000 steps\nzone face apply velocity-normal 1 table 'ramp' range group 'Top'\nhistory interval 250\nzone history name 'disp' displacement-z position (0,0,0)\ncall 'load'\nfish history name 'load' @vert_load\nzone mechanical damping combined\nmodel step 58000\nmodel save 'vertical-loading'"},{"path":"axial-concrete-pile.html","id":"vertical-then-lateral-loading","chapter":"2 Axial Concrete Pile","heading":"2.8.3 vertical then lateral loading","text":"","code":"; vertical loading then lateral loading\nmodel restore 'install'\nzone initialize state 0\nzone gridpoint initialize displacement (0,0,0)\nzone gridpoint initialize velocity     (0,0,0) \nzone face apply stress-zz [-1.0e5/(math.pi*0.3*0.3)] range group 'Top'\nmodel solve ratio 1e-4\nmodel save 'lateral-load-start'\n\n; apply lateral loading as x-velocity on cap\nzone initialize state 0\nzone gridpoint initialize displacement (0,0,0)\nzone gridpoint initialize velocity     (0,0,0) \nzone face apply velocity-x 1e-7 range group 'Top'\nzone history name 'disp' displacement-x position 0,0,0\ncall 'p-y' suppress ; Calculates p-y curve for pile, when tot_reac is called\n@make_pydata        ; Generate p-y curve calculation data \n@output_structure   ; Sanity check of p-y curve data \nfish history name 'load' @tot_reac\nmodel step 416500\nmodel save 'lateral-load'"},{"path":"pull-tests.html","id":"pull-tests","chapter":"3 Pull-Tests","heading":"3 Pull-Tests","text":"\n## Problem Description\nnote: FISH function force used sum raction forces monitor nodal displacement generated pull-testnote: free length bolt extends block + larger diameter\nPerfectly plastic behavior grout = max cohesion exceeded +post-peak weakening shear bond strengthnote: bond strength softening grout defined keyword coupling-cohesion-table (see Rockbolt Behavior)\nrelation btw shear disp. cohesion weakening prescribed\nthru table cct. softening friction grout canbe defined using keyword coupling-friction-table.","code":""},{"path":"pull-tests.html","id":"zones-2","chapter":"3 Pull-Tests","heading":"3.1 Zones","text":"","code":"; ==================================================================\n;   Simulation of pull-test for grouted reinforcement\n;   using modified pile elements - Softening of cohesion\n; ==================================================================\nmodel new \nfish automatic-create off\nmodel title 'Pull-test using modified pile elements - cohesion softening'\n; Create a single rock block and set its material properties.\nzone create brick size 4 4 6 point 1 (0.4,0,0) point 2 (0,0.4,0) ...\n                             point 3 (0,0,0.6)"},{"path":"pull-tests.html","id":"properties-1","chapter":"3 Pull-Tests","heading":"3.2 Properties","text":"","code":"zone cmodel assign elastic\nzone property bulk 5e9 shear 3e9\nzone face apply velocity-normal 0.0 range position-z 0.6\n; Create a pile element and assign properties\nstruct pile create by-line (0.2,0.2,0.1) (0.2,0.2,0.7) segments 12\nstruct pile property rockbolt-flag on\nstruct pile property young 200e9 poisson 0.25 cross-sectional-area 5e-4 ...\n                     perimeter 0.08\nstruct pile property tensile-yield   2.25e5  ; ultimate tensile strength\nstruct pile property moi-y 2.0e-8 moi-z 2.0e-8 moi-polar 4.0e-8 ; 0.25*pi*r^4\nstruct pile property coupling-cohesion-shear 1.75e5 ...\n                     coupling-stiffness-shear 1.12e7\nstruct pile property coupling-cohesion-normal 1.75e5 ...\n                     coupling-stiffness-normal 1.12e7\nstruct pile property coupling-cohesion-table 'cct'\n; change in cohesion with relative shear displacement\ntable 'cct' add (0,1.75e5) (0.025,1.75e4)"},{"path":"pull-tests.html","id":"initial-equilibrium-2","chapter":"3 Pull-Tests","heading":"3.3 Initial Equilibrium","text":"","code":"struct node fix velocity-x range position-z 0.7\nstruct node initialize velocity-x 1e-6 local range position-z 0.7\ncall 'pileforce' suppress ; FISH function calculates reaction force on zones"},{"path":"pull-tests.html","id":"alterations-2","chapter":"3 Pull-Tests","heading":"3.4 Alterations","text":"","code":"; Set up histories for monitoring model behavior\nhistory interval 10\nfish history name 'force' @force\nstruct node history name 'disp' displacement-z position (0.2,0.2,0.7)\n; Achieve a total displacement of 4.0 cm\nmodel cycle 40000\n;\nmodel save 'pull-5'"},{"path":"pull-tests.html","id":"some-other-notes","chapter":"3 Pull-Tests","heading":"3.5 Some other notes","text":"2.3. pull test confinement “Pulltest06.f3dat”\n+modified pile logic.(see Behavior Shear Coupling Springs) linear law implemented.whereby reinforcement shear strength defined constant(coupling-cohesion-shear)+ effective pressureperimeterfric angle(coupling-friction-shear)\npressure dependence activated automatically issuing reinforcement properties(perimeter) and2.5. pull test tensile rupture “Pulltest08.f3dat”\nnote: tensile-yield, tensile-failure-strain: limiting axial yield force limiting axial strain rockbolt","code":""},{"path":"grid.html","id":"grid","chapter":"4 Grid","heading":"4 Grid","text":"","code":""},{"path":"grid.html","id":"primitive-shapes","chapter":"4 Grid","heading":"4.1 Primitive Shapes","text":"note: zone create generates primitive gridnote: zone gridpoint create puts gridpoints specific locations note: zone gridpoint merge ensures separate primitives connected properlynote: zone attach connects primitive meshes different zone sizes.ex) 5 along innder radius cylindrical tunnel,\n10 along axis\n6 along circumference tunnel\n12 periphery tunnel outer boundary modelnote: size keyword defines number zones grid.keywords zone create:\n- dimension\n- edge\n- fill\n- point (boundary dimensions)\n- ratio (coarser toward edge)\n- size","code":"zone create radial-cylinder size 5 10 6 12 fill\nzone create radial-cylinder size 5 10 6 12 ratio 1 1 1 5\neach size is controlled by a ratio (geometric ratio of 1.2 times preceding zone)"},{"path":"grid.html","id":"several-primitive-shapes-connected","chapter":"4 Grid","heading":"4.2 several primitive shapes connected:","text":"adds symmetric part.note: symmetry plane vertical plane (located dip, dip-direction, origin keywords) coincident x = 0 plane. Note dip angle (dip) dip direction (dip-direction) assume x corresponds “East,” y “North,” z “.”third option, zone gridpoint create command, available position single points model region.note: zone gridpoint create used positioning reference points primitives execution zone create command, check made boundary gridpoint boundary gridpoints zones already exist.\ntwo boundary gridpoints fall within tolerance 1 ? 10-7 (relative magnitude gridpoints position vector) , assumed point,\ndiscovered gridpoints don’t match, zone gridpoint merge command can used merge gridpoints zone create command applied.Example: (zone attach) - Two unequal sub-gridsExample: (zone densify)first two command lines can changed \nzone densify segments 2 refines upper zones (z-coordinate 2 4) segment number 2 edge.","code":"zone create radial-cylinder size 5 10 6 12 rat 1 1 1 1.2 ...\n                           point 0 (0,0,0) point 1 (100,0,0) ...\n                           point 2 (0,200,0) point 3 (0,0,100)\nzone create radial-tunnel size 5 10 5 12 rat 1 1 1 1.2 ...\n                          point 0 (0,0,0) point 1 (0,0,-100) ...\n                          point 2 (0,200,0) point 3 (100,0,0)\n; here, model boundary dimensions are 100, 200, 100\n; boundary coord are defined using point keyword\n\nzone reflect dip 90 dip-direction 270 origin (0,0,0) zone create brick size 4 4 2 point 0 (0,0,0) point 1 (4,0,0) ...\n                             point 2 (0,4,0) point 3 (0,0,2)\nzone create brick size 8 8 4 point 0 (0,0,2) point 1 (4,0,2) ...\n                             point 2 (0,4,2) point 3 (0,0,4)\nzone attach by-face range position-z 2zone create brick size 4 4 4\nzone densify segments 2 range position-x 2 4"},{"path":"grid.html","id":"structural-element-operation","chapter":"4 Grid","heading":"4.3 Structural Element Operation","text":"Creating liner service tunnelThe liner contains 240 structural shell elements connected FLAC3D grid 143 structural-node links. grid liner shown .","code":"; liner\nstructure shell create by-face range cylinder ...\n                                     end-1 (0,0,-1) end-2 (0,50,-1) ...\n                                     radius 3"},{"path":"grid.html","id":"densifying-grid-by-specifying-max-size-length","chapter":"4 Grid","heading":"4.4 Densifying grid by specifying max size length","text":"note local z-direction, maximum size length 0.4. FLAC3D densifies maximum length direction 1/3 (= 0.4)\nzone attach -face command example used attach faces sub-grids together rigidly form single gridAlways use zone attach -face command zone densify command different numbers gridpoints along faces different zones.","code":"model new\nzone create brick size 4 4 4\nplot 'Brick' export bitmap filename 'densify3.png'\n;\nzone densify local maximum-length (0.5,0.5,0.4) range position-z 2 4\nzone attach by-face\n;\nplot 'Brick' export bitmap filename 'densify4.png'"},{"path":"grid.html","id":"densify-a-grid-using-geometric-information","chapter":"4 Grid","heading":"4.4.1 Densify a grid using geometric information","text":"","code":"model new\nzone create brick size 10 10 10\n;\ngeometry set \"setA\" polygon create ...\n                    by-positions (0,0,1) ( 5,0, 1) ( 5,10, 1) (0,10,1)\ngeometry set \"setA\" polygon create ...\n                    by-positions (5,0,1) (10,0, 5) (10,10, 5) (5,10,1)\ngeometry set \"setB\" polygon create ...\n                    by-positions (0,0,5) ( 5,0, 5) ( 5,10, 5) (0,10,5)\ngeometry set \"setB\" polygon create ...\n                    by-positions (5,0,5) (10,0,10) (10,10,10) (5,10,5)\nplot 'Brick2' export bitmap filename 'densify5.png'\n\nzone densify segments 2 range geometry-space \"setA\" set \"setB\" count 1\nzone attach by-face\n;\nplot 'Brick2' export bitmap filename 'densify6.png'"},{"path":"syntax-and-grammar.html","id":"syntax-and-grammar","chapter":"5 Syntax and Grammar","heading":"5 Syntax and Grammar","text":"","code":""},{"path":"syntax-and-grammar.html","id":"introduction","chapter":"5 Syntax and Grammar","heading":"5.1 Introduction","text":"","code":"import itasca as it\nit.command(\"python-reset-state false\")\nit.command(\"\"\"\nmodel new\nzone create brick size 10 10 10\nzone cmodel assign elastic\nzone property density 2950 young 12e9 poisson 0.25\ncycle 1\n\"\"\")\nit.zone.count()\nz=it.zone.find(1)\nprint z\nz.pos()\nvolume_sum = 0.0\nfor z in it.zone.list():\n  volume_sum += z.vol()\n\nprint volume_sum\nprint z.vol() * it.zone.count()\nassert volume_sum == z.vol() * it.zone.count()\n\nz = it.zone.near ((5,5,5))\nz.pos()"},{"path":"syntax-and-grammar.html","id":"zones-3","chapter":"5 Syntax and Grammar","heading":"5.2 Zones","text":"","code":"it.zone.count() # 1000\nz = it.zone.find(1)\nfor z in it.zone.list():\n  z = it.zone.near((5,5,5))\nz.pos()\nz.vol()"},{"path":"syntax-and-grammar.html","id":"properties-2","chapter":"5 Syntax and Grammar","heading":"5.3 Properties","text":"","code":"z.props() or z.props()['bulk']\nz.prop('shear')\nz.set_prop('bulk', 8.5e9)"},{"path":"syntax-and-grammar.html","id":"gridpoints","chapter":"5 Syntax and Grammar","heading":"5.4 Gridpoints","text":"","code":"gp = it.gridpoint.near((2,2,2))\nfor gp in it.gridpoint.list():\n  total_mass = gp.mass_gravity()\nz.vol()*z.density()*1000"},{"path":"syntax-and-grammar.html","id":"structural-elements","chapter":"5 Syntax and Grammar","heading":"5.5 Structural Elements","text":"","code":"it.structure.list()\nit.structure.find(1)\nit.structure.near((0,2,2))\nit.structure.node.find(1)\ns_node.links()[0]"},{"path":"syntax-and-grammar.html","id":"extra-variables","chapter":"5 Syntax and Grammar","heading":"5.6 Extra Variables","text":"","code":"z.set_extra(1, 1.23)\nz.set_extra(2, \"a test string\")\nz.set_extra(1, gp.pos())"},{"path":"syntax-and-grammar.html","id":"groups-and-b.c.","chapter":"5 Syntax and Grammar","heading":"5.7 Groups and B.C.","text":"","code":"if z.group(\"default\") == \"lower\":\n  gp.set_fix(0, True)\n  gp.set_fix(1, True)\n  gp.set_force_load((1e6,2e6,1e6))\nit.zone.near((5,5,5)).stress()\nit.zone.near((5,5,5)).strain()\n\"\"\""},{"path":"syntax-and-grammar.html","id":"parameteric-studies","chapter":"5 Syntax and Grammar","heading":"5.8 Parameteric Studies","text":"","code":"\"*note: for modulus in [6e9, 8e9, 10e9, 12e9]:\"\nit.command(\"\"\"\nmodel restore 'before_cycling'\nzone prop young {}\nmodel solve\n\"\"\".format(modulus))\nvertical_disp = it.gridpoint.near((5,5,10)).disp_z()\nprint \"~~~\".format(modulus,vertical_disp)"},{"path":"syntax-and-grammar.html","id":"setting-fish-variables","chapter":"5 Syntax and Grammar","heading":"5.9 Setting FISH variables","text":"","code":"import itasca as it\nit.command('python-reset-state false')\nit.fish.set('x', 10)\nx = it.fish.get('x') yields 10"},{"path":"syntax-and-grammar.html","id":"issuing-command","chapter":"5 Syntax and Grammar","heading":"5.9.1 Issuing Command","text":"","code":"import itasca as it\nimport numpy as np\ndata = np.loadtext('brick-data.txt')\ncommand_template = ;;; \nzone create brick\nzone cmodel assign elastic\nzone property density {density} young {young} poisson {poisson}\n;;;\ndensity = data[0]\nyoung = data[1]\npoisson = data[2]\n\ncommand = command_template.format(density=density, young=young, poisson=poisson)\nit.command(command)"},{"path":"syntax-and-grammar.html","id":"string","chapter":"5 Syntax and Grammar","heading":"5.10 String","text":"","code":"\"The value of x is {:.2f}\".format(0.3872)\n\"The value of x is {:.2e}\".format(0.3872)\n\"My name is Sasha\"\n\"My name is {}\".format(\"Sasha\")\n\"My name is {name}\".format(name=\"Sasha\")"},{"path":"syntax-and-grammar.html","id":"fish-syntax","chapter":"5 Syntax and Grammar","heading":"5.11 Fish Syntax","text":"","code":""},{"path":"syntax-and-grammar.html","id":"use-of","chapter":"5 Syntax and Grammar","heading":"5.11.1 Use of …","text":"complete FISH statement occupies one line. However, line may typed across two lines long line ultimate terminated continuation character ( … ). Use temporary variables hinge points concatenate lengthy formulas can also handy. following example shows can done:","code":"fish define long_sum  ;example of a sum of many things\n    local temp = v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + v9 + v10\n    long_sum = temp + v11 + v12 + v13 + v14 + v15\nend"},{"path":"syntax-and-grammar.html","id":"variable-types","chapter":"5 Syntax and Grammar","heading":"5.11.2 Variable Types","text":"resulting screen display looks like :","code":"model new\nfish define types\n    v1 = 2\n    v2 = 3.4\n    v3 = 'Have a nice day'\n    v4 = v1 * v2\n    v5 = v3 + ', old chap'\n    v6 = vector(1,2,3)\n    v7 = matrix(vector(1,1,1))\n    v8 = true\nend\n@types\nfish list           Name    Value\n           ------- --------------------\n(function) types 0 (integer)\n           v1    2 (integer)\n           v2    3.400000000000000e+00 (real)\n           v3    'Have a nice day' (string)\n           v4    6.800000000000000e+00 (real)\n           v5    'Have a nice day, old chap' (string)\n           v6    (1.000000000000000e+00,2.000000000000000e+00,\n                  3.000000000000000e+00) (vector3)                [**]\n           v7    3 x 1 (matrix)\n           v8    true (boolean)"},{"path":"syntax-and-grammar.html","id":"traditional-for-loop-in-fish","chapter":"5 Syntax and Grammar","heading":"5.11.3 Traditional for loop in FISH","text":"standard loop also available FISH provide additionalloop control.","code":"fish define xxx\n    sum  = 0\n    prod = 1\n    loop for (n = 1, n <= 10, n = n + 1)\n        sum  = sum  + n\n        prod = prod * n\n    end_loop\n    io.out('The sum is ' + string(sum) + ... \n           ' and the product is ' + string(prod))\nend\n@xxx"},{"path":"syntax-and-grammar.html","id":"controlled-loop","chapter":"5 Syntax and Grammar","heading":"5.11.3.1 Controlled loop","text":"case, loop variable n given successive values 1 10, statements inside loop (loop endloop statements) executed value. mentioned, variable names arithmetic expression substituted numbers 1 10. Note exit statement can used break FISH loop continue statement can used skip remaining instructions loop, moving next sequence loop.important note formulation looping different loop high-level programming languages. instance, one easily control ending condition (.e., loop 1 10 excluding 10) incrementing mechanism (.e., loop 1 10 twos loop backward). standard loop also available FISH provide additional loop control.","code":"model new\nfish define xxx\n    sum  = 0\n    prod = 1\n    loop n (1,10)\n        sum  = sum  + n\n        prod = prod * n\n    end_loop\n    io.out('The sum is ' + string(sum) +  ...\n           ' and the product is ' + string(prod))\nend\n@xxx"},{"path":"syntax-and-grammar.html","id":"if-else-endif-construct","chapter":"5 Syntax and Grammar","heading":"5.11.4 if else endif construct","text":"statements allow conditional execution FISH function segments; else optional. item test consists one following symbols symbol pairs:= # > < >= <=displayed value abc example depends argument provided abc executed. experiment different test symbols (e.g., replace > <).now, FISH functions invoked FLAC3D, either using sqaure brackets [] inline FISH, giving function name prepended @ character, using fish list command. also possible reverse, give FLAC3D commands within FISH functions. valid FLAC3D commands can embedded following FISH statements:","code":"model new\nfish define abc(xx)\n    if xx > 0 then \n        abc = 33\n    else\n        abc = 11\n    end_if\nend\n[abc(1)]\n[abc(-1)]"},{"path":"syntax-and-grammar.html","id":"arrays-and-maps","chapter":"5 Syntax and Grammar","heading":"5.11.5 Arrays and Maps","text":"often case one like store list objects loop future. may computed values zones, instance, specific gridpoint pointers . FISH two containers use circumstances, termed arrays maps.array holds list FISH variables type can looped accessed integer index element array. Arrays can multidimensional resize dynamically. simple example shows one can create array integers sum values.","code":""},{"path":"syntax-and-grammar.html","id":"array-example","chapter":"5 Syntax and Grammar","heading":"5.11.5.1 Array example","text":"example, array created filled numbers. loop construct used loop array entries sum product computed output.map, hand, associative container, meaning one can access members map integer string used insert value map. Maps can dynamically resized added one another (appending maps together), preferred constructs storing lists FISH variables later access.","code":"model new\nfish define array_operation\n    ;create and populate an array with products of 2\n    arr = array.create(10)\n    loop local n(1,10)\n        arr[n] = 2*n\n    end_loop\n      \n    ;compute the sum and product of elements in the array\n    sum = 0\n    prod = 1\n    local i = 1\n    loop while (i <= array.size(arr,1))\n        sum = sum + arr[i]\n        prod = prod * arr[i]\n        i = i + 1\n    end_loop\n    io.out('The sum is ' + string(sum) + ...\n           ' and the product is ' + string(prod))\nend\n@array_operation"},{"path":"syntax-and-grammar.html","id":"map-example","chapter":"5 Syntax and Grammar","heading":"5.11.5.2 Map example","text":"Unlike arrays, maps can looped using loop foreach construct. case, n value held map entry, integer name object map. Likewise, instead using integers insert objects map, one use strings first, second, etc. allows one easily efficiently store access FISH variables user-defined name.","code":"model new\nfish define map_operation\n    ;create and populate a map with products of 2\n    my_map = map(1,2)\n    loop local n(2,10)\n        map.add(my_map,n,2*n)\n    end_loop\n      \n    ;compute the sum and product of elements in the map\n    sum = 0\n    prod = 1\n    loop foreach n my_map\n        sum = sum + n\n        prod = prod * n\n    end_loop\n    io.out('The sum is ' + string(sum) + ...\n           ' and the product is ' + string(prod))\nend\n@map_operation"},{"path":"syntax-and-grammar.html","id":"fish-function","chapter":"5 Syntax and Grammar","heading":"5.11.6 Fish Function","text":"FISH functions calculate bulk shear moduli","code":"model new\nfish define derive(y_mod,p_ratio)\n    s_mod = y_mod / (2.0 * (1.0 + p_ratio))\n    b_mod = y_mod / (3.0 * (1.0 - 2.0 * p_ratio))\nend\n[derive(5e8,0.25)]\n[b_mod] \n[s_mod]"},{"path":"code-block.html","id":"code-block","chapter":"6 Code Block","heading":"6 Code Block","text":"","code":""},{"path":"code-block.html","id":"some-code","chapter":"6 Code Block","heading":"6.1 Some Code","text":"","code":"import itasca as it\nimport numpy as np\nnp.set_printoptions(threshold=20)\nit.command(\"python-reset-state false\")\nfrom itasca import zonearray as za\nfrom itasca import gridpointarray as gpa\n\n\" GROUPS AND MASK ARRAYS \"\nit.command(\"zone group \\\"lower\\\" range position-z 0 5\")\nza.in_group(\"lower\")\nza.in_group(\"lower\").sum(), \"zones in lower group.\"\ncorner_mask = reduce(np.logical_and, (x<3, y<3, z<3))\nza.set_group(corner_mask, \"corner\", \"geometry\")\nprint za.in_group(\"corner\", \"geometry\").sum(), \"zones in corner group.\"\n\n\" GRIDPOINTS ARRAY FUNCTIONS \"\ngpos = gpa.pos()\ngx, gy, gz = gpos.T\nprint gz\nf = gpa.fixity()\nprint f\nf[:,][gz==0] = True, True, True\nprint f\ngpa.set_fixity(f)\n\ntop_gridpoints = gz==10\nradial_distance = np.sqrt((gx-5)**2+(gy-5)**2)\ncentral_gridpoints = radial_distance < 5\nmask = np.logical_and(top_gridpoints, central_gridpoints)\nprint \"boundary load applied to {} gridpoints\".format(mask.sum())\nfapp = gpa.force_app()\nprint fapp\nfapp[:,2] = mask*1e6*(5.0-radial_distance)/5.0\ngpa.set_force_app(fapp)\n\nprint \"zone centroids: \"\nprint za.pos()\nza.gridpoints()\nza.faces()\nza.ids()\nprint za.neighbors()\n\n\n\n\" =========================================== \"\n\" =================RESULTS=================== \"\n\" =========================================== \"\n\nit.command(\"model solve\")\nprint \"gridpoint displacements:\"\nprint gpa.disp()\nprint \"gridpoint displacement magnitudes: \"\nmag = np.linalg.norm(gpa.disp(), axis=1)\nprint mag\nmax_index = np.argmax(mag)\nprint \"Maximum displacement: {} at location {}\".format(gpa.disp()[max_index],\n                                              gpa.pos()[max_index])\n\nprint \"Vertical displacement along the vertical line x=5, y=5: from z=0 to z=10\"\nprint gpa.disp()[np.logical_and(gx==5, gy==5)][:,2]\n\nza.stress()\n\nza.stress_flat()\n\n\n\" =========================================== \"\n\" =========REFERENCE EXAMPLES================ \"\n\" =========================================== \"\n\n\n\"\"\" Some Numpy Operation Examples\nnp.array([1,2,3,4,5])\nnp.linspace(0,1,15)\nnp.zeros((4,4))\na = np.linspace(0,1,15)\nb = np.ones_like(a)\nnp.sin(a)\nprint a[0]\na[0] = 20.2\nprint a\nc = np.array(((1,2,3),(4,5,6),(7,8,9),(10,11,12)))\nprint c\nc[0][0]\nc[:,0]\n\"\"\"\n\"\"\" SOME GRIDPOINTS EXAMPLES\nz = it.zone.near((5,5,5))\nprint \"central zone id: {}, position: {}\".format(z.id(), z.pos())\n\nfor gp in z.gridpoints():\n    print \"gridpoint with id: {} at {}\".format(gp.id(), gp.pos())\n\"\"\""},{"path":"code-block.html","id":"kiast-model","chapter":"6 Code Block","heading":"6.2 KIAST Model","text":"","code":"import itasca as it\nimport numpy as np\nnp.set_printoptions(threshold=20)\nit.command(\"python-reset-state false\")\nfrom itasca import zonearray as za\nfrom itasca import gridpointarray as gpa\n\n# PARAMETERS #\n\n_D_shaft = 1\n_H_shaft = 7.45\n_T_plate = 1.5\n_B_footing = 3.25\n_D_footing = _H_shaft + _T_plate\n_B_soil = _B_footing*5\n_D_soil = _D_footing+3\n\n_radial = 50\n_perimeter = 2*_radial\n_axial = 2*_radial\n_outer = 2*_radial\n\n_bulk = 13.9e9\n_shear = 10.4e9\n\n_E_o = 1e7\n_const = 1e8\n_poisson = 0.25\n\n# ZONE #\n\ncommand_zone = \"\"\"\nmodel new\nz crea r-t p 0 (0,0,0) ...\n           p 1 ({B_soil},0,0) ... \n           p 2 (0,{D_soil},0) ...\n           p 3 (0,0,{B_soil}) ...\n           p 4 ({B_soil},{D_soil},0) ...\n           p 5 (0,{D_soil},{B_soil}) ...\n           p 6 ({B_soil},0,{B_soil}) ...\n           p 7 ({B_soil},{D_soil},{B_soil}) ...\n           p 8 ({B_footing},0,0) ...\n           p 9 (0,0,{B_footing}) ...\n           p 10 ({B_footing},{D_soil},0) ...\n           p 11 (0,{D_soil},{B_footing}) ...\n           p 12 ({B_footing},0,{B_footing}) ...\n           p 13 ({B_footing},{D_soil},{B_footing}) ...\n           size {radial} {axial} {perimeter} {outer} ...\n           rat 1 1 1 1.01 ...\n           fill\n\"\"\"\n\ncommand = command_zone.format(\nB_footing = _B_footing,\nB_soil = _B_soil,\nD_soil = _D_soil,\nradial=_radial,\naxial = _axial,\nperimeter = _perimeter,\nouter = _outer)\n\nit.command(command)\n\n# GROUP #\n\np = za.pos()\nx,y,z = p.T\nprint(it.zone.count(), \"zones in whole model\")\n\nshaft = reduce(np.logical_and, (np.sqrt(x**2+z**2)<_D_shaft, y<_H_shaft))\nza.set_group(shaft, \"shaft\") # set the zones with shaft = true have \"shaft\" and \"geometry\"\nprint(za.in_group(\"shaft\").sum(), \"zones in shaft group.\") #output how many zones are in the corner group\n\nplate = reduce(np.logical_and, (x<_B_footing,z<_B_footing, y>_H_shaft,y<_D_footing))\nza.set_group(plate, \"plate\") # set the zones with plate = true have \"plate\" and \"geometry\"\nprint(za.in_group(\"plate\").sum(), \"zones in plate group.\") #output how many zones are in the corner group\n\n# CONSTITUTIVE MODEL #\n\n#it.command(\"\"\"\n#zone cmodel assign strain-softening range group \"Radial Tunnel1\"\n#zone property density 2500 bulk 2e8 shear 1e8 range group \"Radial Tunnel1\"\n#zone property cohesion 2e6 friction 45 tension 2e5 dilation 10 range group \"Radial Tunnel1\"\n#zone property table-friction 'fri' table-cohesion 'coh' table-dilation 'dil' range group \"Radial Tunnel1\"\n#table 'fri' add (0, 45) (.05, 42) (.1, 40) (1, 40)\n#table 'coh' add (0,2e6) (.05,1e6) (.1,5e5) (1,5e5) \n#table 'dil' add (0, 10) (.05,  3) (.1,  0)\n#\"\"\")\n\nit.command(\"\"\"\nzone cmodel assign elastic range group \"Radial Tunnel1\"\nzone cmodel assign elastic range group 'shaft'\nzone cmodel assign elastic range group 'plate'\n\nfish define fname(E_o,const)\nloop foreach pnt zone.list\nz_depth = zone.pos.y(pnt)\nE = E_o+const*math.sqrt(z_depth)\nzone.prop(pnt,'young')=E\nend_loop\nend\n@fname({E_o_},{const_})\nzone property poisson {poisson_}\nplot item create zone contour property name 'young'\n\"\"\".format(E_o_=_E_o,const_=_const,poisson_=_poisson))\n\nit.command(\"\"\"\nzone property bulk {bulk}  shear {shear} range group 'shaft'\nzone property bulk {bulk}  shear {shear} range group 'plate'\n\"\"\".format(bulk=_bulk,shear=_shear))\n\n#soil = za.in_group(\"Radial Tunnel1\")\n# list(gp.list)\n# gp.isgroup(::gp.list,\"North\")\n# gp.force.unbal(::ad)\n# [ad = list(gp.list)(gp.isgroup(::gp.list,\"North))]"},{"path":"theory.html","id":"theory","chapter":"7 Theory","heading":"7 Theory","text":"","code":""},{"path":"theory.html","id":"interface","chapter":"7 Theory","heading":"7.1 Interface","text":"several instances geomechanics desirable represent planes sliding separation can occur. example:joint, fault, bedding planes geologic medium;interface foundation soil;contact plane bin chute material contains;contact two colliding objects; anda planar “barrier” space, represents fixed, non-deformable boundary arbitrary position orientation.FLAC3D provides interfaces characterized Coulomb sliding /tensile shear bonding. Interfaces properties friction, cohesion, dilation, normal shear stiffnesses, tensile shear bond strength. Although restriction number interfaces complexity intersections, generally reasonable model simple interfaces FLAC3D awkward specify complicated interface geometry. program 3DEC (Itasca 2007) specifically designed model many interacting bodies three dimensions; used instead FLAC3D complicated interface problems.Interfaces may also used join regions different zone sizes. general, zone attach command used join grids together. However, circumstances, may convenient use interface purpose. case, interface prevented sliding opening correspond physical entity.","code":""},{"path":"theory.html","id":"formulation","chapter":"7 Theory","heading":"7.2 Formulation","text":"FLAC3D represents interfaces collections triangular elements (interface elements), defined three nodes (interface nodes). Interface elements can created location space. Generally, interface elements attached zone surface face; two triangular interface elements defined every quadrilateral zone face. Interface nodes created automatically every interface element vertex. another grid surface comes contact interface element, contact detected interface node characterized normal shear stiffnesses, sliding properties.interface element distributes area nodes weighted fashion. interface node associated representative area. entire interface thus divided active interface nodes representing total area interface. Figure 1 illustrates relation interface elements interface nodes, representative area associated individual node.important note interfaces one-sided FLAC3D. (differs formulation two-sided interfaces two-dimensional FLAC (Itasca 2011).) may helpful think FLAC3D interfaces “shrink-wrap” stretched desired surface, causing surface become sensitive interpenetration face may come contact.fundamental contact relation defined interface node zone surface face, also known target face. normal direction interface force determined orientation target face.timestep, absolute normal penetration relative shear velocity calculated interface node contacting target face. values used interface constitutive model calculate normal force shear-force vector. constitutive model defined linear Coulomb shear-strength criterion limits shear force acting interface node, normal shear stiffnesses, tensile shear bond strengths, dilation angle causes increase effective normal force target face shear-strength limit reached. default, pore pressure used interface effective stress calculation. option can activated/deactivated using command zone interface effective command setting effective = /. Figure 2 illustrates components constitutive model acting interface node (P):normal shear forces describe elastic interface response determined calculation time \\((t + \\Delta t)\\) using relations:\\[ F_n^{(t + \\Delta t)} = k_n u_n + \\sigma_n  \\]\n\\[ F_{si}^{(t + \\Delta t)} = F_{si}^{(t)} + k_s \\Delta u_{si}^{(t + 0.5 \\Delta t)} + \\sigma_{si} \\]inelastic interface logic works following way:Bonded interface — interface remains elastic stresses remain bond strengths; shear bond strength, well tensile bond strength. normal bond strength set using tension interface property keyword. command zone interface node property shear-bond-ratio = sbr sets shear bond strength sbr times normal bond strength. default value property shear-bond-ratio (given) 100.0. bond breaks either shear stress exceeds shear strength, tensile effective normal stress exceeds normal strength. Note giving property shear-bond-ratio alone cause bond established—tensile bond strength must also set.Bonded interface — interface remains elastic stresses remain bond strengths; shear bond strength, well tensile bond strength. normal bond strength set using tension interface property keyword. command zone interface node property shear-bond-ratio = sbr sets shear bond strength sbr times normal bond strength. default value property shear-bond-ratio (given) 100.0. bond breaks either shear stress exceeds shear strength, tensile effective normal stress exceeds normal strength. Note giving property shear-bond-ratio alone cause bond established—tensile bond strength must also set.Slip bonded — intact bond, default, prevents yield behavior (slip separation). optional property switch (bonded-slip) causes separation prevented bond intact (allows shear yield, control friction cohesion parameters, using (F_n) normal force). command allow/disallow slip bonded interface segment zone interface node setting bonded-slip .Slip bonded — intact bond, default, prevents yield behavior (slip separation). optional property switch (bonded-slip) causes separation prevented bond intact (allows shear yield, control friction cohesion parameters, using (F_n) normal force). command allow/disallow slip bonded interface segment zone interface node setting bonded-slip .default state bonded-slip (given) .Coulomb sliding — bond either intact broken. broken, behavior interface segment determined friction cohesion (course stiffnesses). default behavior, bond strengths set (zero). broken bond segment take effective tension (may occur compressive normal force, pore pressure greater). shear force zero (nonbonded segment) effective normal force tensile zero.Coulomb shear-strength criterion limits shear force relation:\\[ F_{smax} = c + tan\\phi (F_n - pA)\\]\nsliding, shear displacement may cause increase effective normal stress joint, according relation:\\[\\sigma_n := \\sigma_n + \\frac{|F_s|_o - F_{smax}}{k_s} tan\\psi k_n\\]printout (see zone interface node list command ) value tension denotes whether bond intact broken (set) — nonzero zero, respectively.normal shear forces calculated interface nodes distributed equal opposite directions target face face interface node connected (host face). Weighting functions used distribute forces gridpoints face. interface stiffnesses added accumulated stiffnesses gridpoints sides interface order maintain numerical stability.Interface contacts detected interface nodes, contact forces transferred interface nodes. stress state associated node assumed uniformly distributed entire representative area node. Interface properties associated node; properties may vary node node.default, effect pore pressure included interface calculation using effective stress basis slip condition. (interface pore pressure interpolated target face.) applies model configure fluid mode, pore pressures assigned zone water zone gridpoint initialize pore-pressure command without specifying model configure fluid. user can switch options interface s using zone interface effective command setting effective . default FLAC3D logic, fluid flow (saturated unsaturated) carried across interface, provided interface keyword maximum-edge used particular interface. permeable interface option can deactivated/reactivated interface s using zone interface permeability command setting effective . Note keyword maximum-edge used zone interface element command, permeability particular interface, warning issued inform user interface considered impermeable fluid flow. (Note fluid flow calculation , mechanical model must present. Also, model cycle 0 command model mechanical active used initialize weighting factors used transfer fluid flow information across interface.) pressure drop normal joint influence normal displacement pore pressure calculated.Also, flow fluid along interface modeled.","code":""},{"path":"theory.html","id":"creation-of-interface-geometry","chapter":"7 Theory","heading":"7.3 Creation of Interface Geometry","text":"Interfaces created zone interface create command. cases interface two separate grids model required, zone interface create -face command used attach interface one grid surfaces. command generates interface elements interface s along surface zone faces center point fall within specified range. surfaces interface created must generated initially; must possible specify existing surface order create interface elements. gap must specified two adjacent surfaces, unless zone interface create -face command separate keyword given. case, separate sub-grids may surface gridpoints location space.default, two interface elements created zone face. number interface elements can increased using zone interface s element maximum-edge v command. [1] causes interface elements edge lengths larger v subdivide smaller elements lengths smaller v. command can used increase resolution decrease arching forces portions model large contrasts zone size across interface.Several rules followed using interface elements FLAC3D:smaller surface area contacts larger surface area (e.g., small block resting large block), interface attached smaller region.difference zone density two adjacent grids, interface attached grid greater zone density (.e., greater number zones within area).size interface elements always equal smaller target faces come contact. case, interface elements subdivided smaller elements.Interface elements limited grid surfaces actually come contact another grid.\nsimple example illustrating procedure interface creation provided “DippingJoint.f3dat.” corresponding project file, “DippingJoint.f3prj,” located folder “datafiles InterfaceDippingJoint.” example block specimen containing single joint dipping angle \\(45°\\)","code":"; Create interface elements on the top surface of the base        \nzone interface 'joint' create by-face separate range group 'Top' group 'Base'\nmodel save 'int1'\nreturn"},{"path":"command.html","id":"command","chapter":"8 Command","heading":"8 Command","text":"","code":""},{"path":"command.html","id":"interface-1","chapter":"8 Command","heading":"8.1 Interface","text":"","code":""},{"path":"command.html","id":"zone-face-group","chapter":"8 Command","heading":"8.1.1 zone face group","text":"Example:Adds group name ‘wall’ zone faces included optional range.\nAlso can used zone face group “slotname = groupname”\nZone face may belong many groups, 128.\nkeywords: internal, , remove.\n- internal: select faces.\nspecified, range looks internal faces well surface faces.: considered inside surface conditions non-null model.: considered inside surface conditions non-null model.remove: group removed zone face.remove: group removed zone face.","code":"zone face group s keyword ... <range> zone face group 'wall' internal range group 'wall-c' group 'pile'"},{"path":"command.html","id":"zone-face-skin","chapter":"8 Command","heading":"8.1.2 zone face skin","text":"Generates contiguous face groups skinning.“skinning” refers automatic face group generation, occurs follows: program looks contiguous faces puts automatically named groups within slot named skin. Two faces considered contiguous angle two faces exceeds break angle, two faces belong different groups according command’s slot specification.\nUnless internal specified, operation zone face skin restricted external faces. zone faces zone side, hidden zone side considered surface faces.\nuse-hidden-zones used, within specified range included consideration.group names generated follows:\nsEast, sWest, sNorth, sSouth, sTop, sBottomInternal faces assigned names group either side changed order create .","code":"zone face skin"},{"path":"command.html","id":"zone-separate","chapter":"8 Command","heading":"8.1.3 zone separate","text":"separates internal faces specified range. gridpoints face duplicated, new face created. New faces gridpoints get copies group extra variable assignments belonging original face gridpoint.Example:\nFred George group names assigned zones, thenwill select faces connected zone group Fred George.keyword:\n- -face: attempts separate internal faces range\n- new-side group: newly created faces assigned group name specified slot.\ndefault slot, named Default.","code":"zone separete by-face new-side group 'iwall' slot 'int' range group 'wall' or 'base'range group 'Fred' group 'George'"},{"path":"command.html","id":"zone-interface-create","chapter":"8 Command","heading":"8.1.4 zone interface create","text":"creates nodes elements interface sideThere two techniques creating interface.\n1. derive interface range zone faces using -face keyword.\n2. specify triangular interface element 3 points.\n3. Command may also used construct interface node may used element keyword.keyword:\n- -face: interface elements created surface zone faces within specified range. error occur interface elements interface already exist selected faces.\noptional separate keyword used, internal zone faces selected range. list selected faces automatically separated (zone separate) interface elements placed one side. following separate keyword: new-side-origin, clear-attach.element point keyword … : create triangular interface element specifying 3 points. Three verticies must specified following keyword. point can created located space using position keyword, existing interface node ID may specified. interface element created attached grid face even location corresponds face. element fixed space. active side element defined walking around edge element, point 1 point 2 point 3; active side walking clockwise direction.point element, one following two keywords must supplied: node , position v.node v : creates interface node position v. node already exists selected location, error reported. created node fixed space.","code":"zone interface 'side' create by-face range group 'wall' and 'iwall'\n\nzone interface 'side' node property stiffness-normal 1e8 stiffness-shear 1e8 friction 20 cohesion 30000"},{"path":"template.html","id":"template","chapter":"A 1. Template","heading":"A 1. Template","text":"","code":""},{"path":"template.html","id":"problem-description-1","chapter":"A 1. Template","heading":"A.1 Problem Description","text":"","code":""},{"path":"template.html","id":"modeling-procedure-1","chapter":"A 1. Template","heading":"A.2 Modeling Procedure","text":"","code":""},{"path":"template.html","id":"zonesgroups","chapter":"A 1. Template","heading":"A.3 Zones/Groups","text":"","code":""},{"path":"template.html","id":"properties-3","chapter":"A 1. Template","heading":"A.4 Properties","text":"","code":""},{"path":"template.html","id":"b.c.-and-i.c.-1","chapter":"A 1. Template","heading":"A.5 B.C. and I.C.","text":"","code":""},{"path":"template.html","id":"initial-equilibrium-3","chapter":"A 1. Template","heading":"A.6 Initial Equilibrium","text":"","code":""},{"path":"template.html","id":"alterations-3","chapter":"A 1. Template","heading":"A.7 Alterations","text":"","code":""},{"path":"template.html","id":"results-1","chapter":"A 1. Template","heading":"A.8 Results","text":"","code":""},{"path":"reference-collective.html","id":"reference-collective","chapter":"B Reference Collective","heading":"B Reference Collective","text":"","code":""},{"path":"reference-collective.html","id":"uplift-resistance-of-anchor-plate","chapter":"B Reference Collective","heading":"B.0.1 Uplift Resistance of Anchor Plate","text":"","code":""},{"path":"reference-collective.html","id":"before-1968","chapter":"B Reference Collective","heading":"B.0.1.1 Before 1968","text":"CoulombMohrKotter’s equationBalla (1961)MorsMatsuo","code":""},{"path":"reference-collective.html","id":"post-1968","chapter":"B Reference Collective","heading":"B.0.1.2 Post-1968","text":"Meyerhof, G.G., Adams, J.. 1968Meyerhof, G.G. 1973Das, B.M., Seeley, G.R. 1975Rowe, R.K., Davis, H. 1982Dickin, E.., Leung, C.F. 1983Murray, E.J., Geddes, J.D. 1987Dickin, E.. 1988Koutsabeloulis, N.C., Griffiths, D.V. 1989\n#### Post-2000Merifield, R.S., Sloan, S.W. 2006","code":""},{"path":"reference-collective.html","id":"numerical-analysis","chapter":"B Reference Collective","heading":"B.0.2 Numerical Analysis","text":"","code":""},{"path":"reference-collective.html","id":"standards","chapter":"B Reference Collective","heading":"B.0.3 Standards","text":"IEEE 2001DS 1110, DS 1111","code":""},{"path":"reference-collective.html","id":"textbook","chapter":"B Reference Collective","heading":"B.0.4 Textbook","text":"Das, B. M. 2013. Earth Anchors","code":""},{"path":"reference-collective.html","id":"ph.d-thesis","chapter":"B Reference Collective","heading":"B.0.5 Ph.D Thesis","text":"","code":""},{"path":"reference-collective.html","id":"award-lecture","chapter":"B Reference Collective","heading":"B.0.6 Award Lecture","text":"","code":""}]
